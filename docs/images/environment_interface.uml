@startuml
set separator none
skinparam componentStyle rectangle
skinparam component {
  BackgroundColor WhiteSmoke
  ' BackgroundColor<<class>> lightblue
  ' BackgroundColor<<abstract class>> lightblue
  ' BackgroundColor<<functions>> lightgreen
  ' BackgroundColor<<methods>> lightgreen
}

frame "The Management Process" as mgmt_proc {

  component "npc_maker.env.Environment" <<class>> {

    component instance_init <<constructor>> [
      
      .. // arguments // ..
      * evolution services
      * environment specification
      * graphics mode
      * settings dictionary
      * stderr
    ]

    component instance_commands <<methods>> [
      
      * start()
      * stop()
      * pause()
      * resume()
      * save(path)
      * load(path)
      * custom(message)
      * quit()
    ]
    
    component instance_poll <<methods>> [
      
      * poll()
    ]

    component instance_hooks <<abstract methods>> [
      
      * on_start()
      * on_stop()
      * on_pause()
      * on_resume()
      * on_quit()
      * on_save(path)
      * on_load(path)
      * on_custom(message)
    ]

    instance_init -[hidden] instance_commands
    instance_commands -[hidden]- instance_poll
    instance_hooks -[hidden] instance_poll
  }

  component evo <<abstract class>> [
    **npc_maker.evo.Evolution**
    
    .. // methods // ..
    * birth(parents) -> individual
    * death(individual)
  ]

  component mgmt_stderr <<file descriptor>> [
    stderr
  ]

  instance_poll -l> instance_hooks : calls on ack
  instance_poll --> evo : calls

  "npc_maker.env.Environment" -[hidden]- evo
  evo -[hidden]- mgmt_stderr
}

together {
  () stdin
  () stdout
  () stderr
  stdin -[hidden]- stdout
  stdout -[hidden]- stderr
}

frame "The Environment Subprocess" as env_proc {

  component main <<file>> [
    **main.py**
    
    1| env_spec, mode, settings = npc_maker.env.get_args()
    2| while True:
    3| . . . . message = npc_maker.env.poll()
  ]

  component env_poll <<functions>> [
    
    * npc_maker.env.poll()
    
    .. returns one of ..
    ** None
    ** "Start"
    ** "Stop"
    ** "Pause"
    ** "Resume"
    ** "Heartbeat"
    ** "Quit"
    ** {"Save": "PATH"}
    ** {"Load": "PATH"}
    ** {"Custom": JSON}
    ** {"Birth": {
          "name": "UUID",
          "parents": ["UUID", "UUID"],
          "environment": "ENVIRONMENT"
          "population": "POPULATION",
          "controller": ["COMMAND"],
          "genome": GENOME
      }}
  ]

  component env_api <<functions>> [
    
    * npc_maker.env.ack(message)
    * npc_maker.env.new(population)
    * npc_maker.env.mate(parents)
    * npc_maker.env.info(name, info)
    * npc_maker.env.score(name, score)
    * npc_maker.env.death(name)
  ]

  component eprint <<functions>> [
    
    * npc_maker.env.eprint(message)
  ]

  main      --> env_poll : calls
  main      --> env_api : calls

  env_poll -[hidden]- env_api
  env_api -[hidden]- eprint
}

' Connections between the two processes
instance_init       -r> main : constructor spawns subprocess
instance_commands   -r> stdin
instance_poll       -r> stdin
stdin     -r> env_poll
env_api   -l> stdout
stdout    -l> instance_poll
eprint    -l> stderr
stderr    -l> mgmt_stderr : inherits by default

@enduml